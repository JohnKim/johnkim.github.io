{"version":3,"file":"component---src-templates-post-template-tsx-content-file-path-users-gshs-project-tech-blog-contents-posts-gatsby-블로그-프로젝트-gatsby-블로그-프로젝트-디렉토리-구조-설계-mdx-7031dd16cb0b350fdda1.js","mappings":"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","sources":["webpack://blog/./contents/posts/Gatsby 블로그 프로젝트/Gatsby 블로그 프로젝트 - 디렉토리 구조 설계.mdx","webpack://blog/./src/templates/post_template.tsx","webpack://blog/./src/components/blog/item-tags.tsx","webpack://blog/./src/components/blog/mdx-shortcodes.tsx","webpack://blog/./src/components/blog/post-footer.tsx","webpack://blog/./src/hooks/use-scroll.tsx","webpack://blog/./src/components/blog/post-toc.tsx","webpack://blog/./src/components/common/seo.tsx","webpack://blog/./src/hooks/use-offset-top.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    blockquote: \"blockquote\",\n    em: \"em\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"소프트웨어 개발에 앞서, 아키텍처 설계를 하고 Framework 를 선정하는 작업 이후에는 프로젝트 디렉토리 구조를 어떤 기준으로 구성할지 고민해야 할 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"디렉토리 구조는 아키텍처 설계 또는 프레임워크에 따라 구조가 정해지게 되는데, 이번 블로그 프로젝트에서는 Gatsby 를 사용하기 때문에 이에 맞는 디렉토리 구조가 설계 되어야 할 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"우선 Gatsby 기반의 프로젝트에서 구성해야 하는 기본적인 디렉토리 구조를 살펴본 후,\\n이번 글의 주제인 화면을 구성하는 React Component 파일 디렉토리 구조를 Feature-based 로 할지 Screen-based 로 한지 에 대한 고민을 해보도록 하자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"gatsby-기본-디렉토리-구조\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gatsby-%EA%B8%B0%EB%B3%B8-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B5%AC%EC%A1%B0\",\n    \"aria-label\": \"gatsby 기본 디렉토리 구조 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Gatsby 기본 디렉토리 구조\"), \"\\n\", React.createElement(_components.p, null, \"사실 Gatsby 기반이라고 해서 정해진 디렉토리 구조가 있는 것은 아니다.\\nGatsby 프레임워크를 기반인 경우, 설정(\", React.createElement(_components.code, null, \"/gatsby-config.ts\"), \")이나, 빌드(\", React.createElement(_components.code, null, \"/gatsby-node.ts\"), \", \", React.createElement(_components.code, null, \"/gatsby-browser.ts\"), \" 등 )를 위한 파일들은 프로젝트 최상위 디렉토리에 위치하는 것 이외에, 별도로 고려해야 할 것은 거의 없다.\\nGatsby 가 Default 로 참조하는 폴더가 몇가지 있으며, 이는 아래와 같다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"├── src\\n|  ├── pages            // 1. 페이지 폴더로 향후 Markup 으로 변환\\n|  |  ├── 404.tsx\\n|  |  ├── index.tsx\\n|  |  └── ...\\n|\\n├── static              // 2. JS, CSS, 이미지 등 static 파일\\n|  └── ...\\n|\\n├── gatsby.config.ts    // 3. Gatsby 설정파일로 Plugin 을 추가\\n├── gatsby.node.ts      // 4. Gatsby 에서 Build 하는 과정에 필요한 로직 추가\\n├── gatsby.browser.ts   // 5. 전역에 필요한 CSS, JS 등을 Import\\n├── package.json\\n└── ...\\n\")), \"\\n\", React.createElement(_components.p, null, \"우선 TypeScript 로 작성되었기 때문에 확장자는 \", React.createElement(_components.code, null, \"*.ts\"), \"와 \", React.createElement(_components.code, null, \"*.tsx\"), \"(React JSX Element 를 포함한 파일) 로 되어 있고, 위의 폴더 구조에서 TypeScript 설정이나 Lint 관련된 파일을 다른 프로젝트에서도 많이 볼 수 있으므로 따로 표기하지 않았다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"/src/pages\"), \" : 이 디렉토리에 있는 \", React.createElement(_components.code, null, \"*.jsx\"), \", \", React.createElement(_components.code, null, \"*.tsx\"), \" 파일은 Static Markup 파일로 변환되어 웹페이지 링크로 접속 가능해 진다. 이 중 \", React.createElement(_components.code, null, \"404.tsx\"), \" 파일은 페이지 링크에 없는 접속일 경우 보여지는 Exception 페이지로 자동 설정 된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"/static\"), \" : JS, CSS, 이미지 등 static 파일들을 넣을 수 있는 디렉토리이며, 파일 경로는 그대로 웹페이지에서 접속이 가능하다. \", React.createElement(_components.code, null, \"/src\"), \" 디렉토리 안에 있는 tsx 파일에서도 import 가능하며, 자동으로 minified & compressed 되게 된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"/gatsby.config.ts\"), \" : Gatsby 설정 파일이며, 적용하고자 하는 Plugin을 추가할때 이 파일에 작성해야 한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"/gatsby.browser.ts\"), \" : Markup 으로 랜더링될 때 전역에 필요한 font 파일이나 CSS, JS 를 import 하는데 사용된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"/gatsby.node.ts\"), \" : Gatsby 가 Build 하는 과정에 필요한 작업을 수행하도록 한다. GraphQL 로 접근하는 데이터 스키마를 새로 구성하거나 데이터를 입력하는 작업과, MDX 파일을 Markup 으로 만들기 위한 작업을 하도록 개발하는 파일로, Gatsby API 를 사용하여 로직을 구현하게 된다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"react-component-파일-디렉토리-구조\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#react-component-%ED%8C%8C%EC%9D%BC-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B5%AC%EC%A1%B0\",\n    \"aria-label\": \"react component 파일 디렉토리 구조 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"React Component 파일 디렉토리 구조\"), \"\\n\", React.createElement(_components.p, null, \"화면을 구성하는 React Component 를 화면 UI 즉 Screen 기준으로 폴더를 생성하는것이 맞는가? 아니면, Feature 기준으로 폴더를 생성하는 것이 맞는가에 대한 고민이다.\"), \"\\n\", React.createElement(_components.p, null, \"결론적으로 개인적인 의견이지만, \", React.createElement(_components.strong, null, \"Feature based struction 가 맞다\"), \" 고 생각한다.\\n물론 한명이 개발한 소규모 프로젝트라면, Screen based structure 가 직관적이기에 적합할 수 있겠으나 향후 확장을 고려하거나 다수의 개발자가 참여하는 프로젝트라면, Feature 기준으로 폴더를 생성하는것이 좋겠다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"feature 를 무엇이라고 정의하고 읽어야 하는가?\"), \"\\n\", React.createElement(_components.p, null, \"'기능' 또는 '특징' 이라고 할 수 있겠다. Machine learning 에서는 데이터의 '특징' 이라는 말로 명확하게 의미 전달이 되지만, 일반적인 소프트웨어에서는 '서비스의 기능' 정도이지 않을까 생각한다.\\n이는 function 의 뜻하고도 혼선이 있어, 이글에서는 한글로 번역하지 않고 feature 라고 부르기로 했다. \", React.createElement(_components.em, null, \"Front-end 개발자들간의 커뮤니케이션에는 문제 없을 수 있으나 ML 엔지니어나 서비스기획, PO와의 커뮤니케이션에서 분명 이슈가 있다.\")), \"\\n\", React.createElement(_components.p, null, \"내가 동료분들께 가능하다면 OS 부터 개발도구까지 영문 버전으로 사용하자는 이유도 바로 이런 혼선 때문이기도 하다.\\n예를 들어, Git-flow 에서 feature 를 추가하는 브랜치 생성의 한글 메뉴명이 '기능 추가하기' 인것을 보면, 이 '기능'이 function 인지 feature 인지 의미전달이 명확하지 않아 혼선이 있을 수 밖에 없다. 심지어 'funtion' 은 함수라고도 부르는데 말이다.\\n게다가, 우리 회사에서는 최근 Offshore 해외 개발자와 pair programming 해야하는 상황에서는 한글로 된 OS나 개발툴을 사용할 이유가 더욱 없어졌다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"UI Component들의 파일 디렉토리 구조를 설계할 때 지켜야할 원칙은, One-way Dependency 이다.\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"이말은, 특정 디렉토리에 위치한 UI Component 는, 공통 UI Component 를 제외하고는 반드시 같은 디렉토리 또는 하위 디렉토리의 UI Component 만 import 할 수 있다는 것이다.\")), \"\\n\", React.createElement(_components.p, null, \"블로그 프로젝트에서는 \", React.createElement(_components.code, null, \"/src/components\"), \" 에 UI Component 를 생성하도록 할 것이며, \", React.createElement(_components.code, null, \"/src/components/common\"), \" 의 UI Component 는 모든 파일에서 import 가능하지만(One-way Dependency 의 예외 영역), 그외 \", React.createElement(_components.code, null, \"/src/components/*\"), \" 폴더에 있는 파일은 같은 디렉토리 또는 하위 디렉토리의 파일만 import 가능하다는 것이다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"screen-based-structure\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#screen-based-structure\",\n    \"aria-label\": \"screen based structure permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Screen based structure\"), \"\\n\", React.createElement(_components.p, null, \"UI 화면을 기준으로 디렉토리를 설계 한다면, 아래와 같을 것이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"└── src\\n   ├── components\\n   |  ├── common             // 모든 페이지에서 사용하게 되는 공통 Component\\n   |  |  ├── header.tsx\\n   |  |  └── footer.tsx\\n   |  ├── main\\n   |  |  ├── index.tsx        // 메인 페이지\\n   |  |  └── post-list.tsx    // 메인 페이지에서 사용하는 블로그 포스트 목록 (최신 목록)\\n   |  ├── blog\\n   |  |  ├── index.tsx        // 블로그 포스트 목록 페이지\\n   |  |  └── post-list.tsx    // 블로그 포스트 목록 (전체 블로그 포스트 목록)\\n   |  ├── post\\n   |  |  ├── index.tsx        // 블로그 포스트 페이지\\n   |  |  └── tag-list.tsx     // 블로그 포스트에 포함되어 있는 Tag 목록\\n   |  ├── tag\\n   |  |  ├── index.tsx        // 블로그 테그 목록 페이지\\n   |  |  └── post-list.tsx    // 테그별 블로그 포스트 목록\\n   |  └── ...\\n   └── ...\\n\")), \"\\n\", React.createElement(_components.p, null, \"화면을 기준으로 디렉토리를 생성하게 되면, 중복된 UI Component 가 각 화면 폴더에 중복해서 들어가야 할 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"위에서 보는 바와 같이 메인 페이지, 블로그 포스트 목록 페이지, 테그 목록 페이지에서는 '블로그 포스트 목록' UI Component 가 중복해서 필요하다.\\n위의 디렉토리 구조는 UI Component 를 상세히 모듈화 하여 표시하지 않았기 때문에 중복되는 구조가 크게 복잡해 보이지 않지만, 실제로 상세히 모듈화 한다면 더욱 중복이 많이 발생하게 될 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 해결하기 위해서, 여러 페이지에서 사용해야 하는 UI Component 를 모두 \", React.createElement(_components.code, null, \"/src/components/comon\"), \" 폴더에 넣어야 한다면, 공통 UI Component 가 상당히 늘어나게 되는 문제가 발생하게 된다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"feature-based-structure\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#feature-based-structure\",\n    \"aria-label\": \"feature based structure permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Feature based structure\"), \"\\n\", React.createElement(_components.p, null, \"이제 화면이 아닌 feature 기준으로 디렉토리를 구분한 예시를 살펴보자. 본 블로그 프로젝트 구조도 이와 동일한 구조로 설계되어 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"└── src\\n   ├── components\\n   |  ├── common              // 모든 페이지에서 사용하게 되는 공통 Component\\n   |  |  ├── header.tsx\\n   |  |  └── footer.tsx\\n   |  ├── blog\\n   |  |  ├── post.tsx         // 블로그 포스트 Component\\n   |  |  └── post-list.tsx    // 블로그 포스트 Component로 목록을 구현한 Component\\n   |  ├── tag\\n   |  |  ├── tag.tsx          // 블로그 테그 Component\\n   |  |  └── post-list.tsx    // 블로그 테그 Component로 목록을 구현한 Component\\n   |  └── ...\\n   ├── templates              // 화면 페이지들\\n   |  ├── main-template.tsx\\n   |  ├── blog-template.tsx\\n   |  ├── post-template.tsx\\n   |  ├── tag-template.tsx\\n   |  ├── main-template.tsx\\n   |  └── ...\\n   └── ...\\n\")), \"\\n\", React.createElement(_components.p, null, \"위에 구조에서 볼 수 있듯이 \", React.createElement(_components.code, null, \"/src/components\"), \" 에는 feature 별로 디렉토리를 구분하여 구성하였고, 우리는 \", React.createElement(_components.code, null, \"/src/templates\"), \" 에는 화면별로 파일을 생성하였다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"/src/components/common\"), \" 은 모든 화면 또는 UI Component 에서 접근이 가능하고, feature 별로 구분되다보니 \", React.createElement(_components.code, null, \"/src/components/blog\"), \" 와 \", React.createElement(_components.code, null, \"/src/components/tag\"), \" 로 구성된 것을 볼 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"결론\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B2%B0%EB%A1%A0\",\n    \"aria-label\": \"결론 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"결론\"), \"\\n\", React.createElement(_components.p, null, \"프로젝트 초기 아키텍처 설계를 하고 Framework 를 선정한 이후, 프로젝트 디렉토리 구조를 어떤 기준으로 구성할지 정해야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"소규모 프로젝트 이면서, 향후 확장을 고려할 필요가 없다면, 화면 단위로 디렉토리를 구성해도 문제 될 것은 없지만, 향후 확장을 고려한다면 Feature-based structure로 설계 하는 것이 좋겠다.\"), \"\\n\", React.createElement(_components.p, null, \"그리고, Feature-based Structure는 프로젝트 코드의 디렉토리 구조이기도 하지만, Design System 에서도 물론 동일하게 가져가야 하는 기준이 되어야 할 것이다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/gshs/project/tech-blog/contents/posts/Gatsby 블로그 프로젝트/Gatsby 블로그 프로젝트 - 디렉토리 구조 설계.mdx\";\nimport React from 'react';\nimport {jsx, Heading, Divider} from 'theme-ui';\nimport {MDXProvider} from '@mdx-js/react';\nimport {SEO} from 'components/common/seo';\nimport Layout from 'components/common/layout';\nimport ItemTags from 'components/blog/item-tags';\nimport PostFooter from 'components/blog/post-footer';\nimport MdxShortCodes from 'components/blog/mdx-shortcodes';\nimport PostToc from 'components/blog/post-toc';\nimport useOffsetTop from 'hooks/use-offset-top';\nvar px = [\"32px\", \"16px\", \"8px\", \"4px\"];\nvar shadow = px.map(function (v) {\n  return \"rgba(0, 0, 0, 0.15) 0px \" + v + \" \" + v + \" 0px\";\n});\nvar PostTemplate = function PostTemplate(_ref) {\n  var mdx = _ref.data.mdx, children = _ref.children;\n  var _useOffsetTop = useOffsetTop(), ref = _useOffsetTop.ref, offsetTop = _useOffsetTop.offsetTop;\n  return jsx(Layout, null, mdx.tableOfContents && mdx.tableOfContents.items && jsx(PostToc, {\n    items: mdx.tableOfContents.items,\n    articleOffset: offsetTop\n  }), jsx(Heading, {\n    as: \"h1\",\n    variant: \"styles.h1\"\n  }, mdx.title), mdx.description && jsx(\"p\", {\n    sx: {\n      color: \"onSurface\",\n      my: 4,\n      fontSize: [2, 3, 4]\n    }\n  }, mdx.description), mdx.tags && jsx(React.Fragment, null, jsx(\"div\", {\n    sx: {\n      mt: 3\n    }\n  }, jsx(ItemTags, {\n    tags: mdx.tags\n  }))), jsx(\"p\", {\n    sx: {\n      color: \"onSurface\",\n      my: 3,\n      fontSize: [1, 1, 1]\n    }\n  }, jsx(\"time\", null, mdx.date), mdx.timeToRead && \" \\u2014 \", mdx.timeToRead && jsx(\"span\", null, Math.ceil(mdx.timeToRead), \" min read\")), jsx(Divider, null), jsx(\"section\", {\n    sx: {\n      my: 5,\n      '.gatsby-resp-image-wrapper': {\n        my: [4, 4, 5]\n      },\n      variant: \"layout.content\"\n    },\n    ref: ref\n  }, jsx(MDXProvider, {\n    components: MdxShortCodes\n  }, children)), jsx(PostFooter, {\n    post: mdx\n  }));\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport var Head = function Head(_ref2) {\n  var mdx = _ref2.data.mdx, location = _ref2.location;\n  return jsx(SEO, {\n    title: mdx.title,\n    pathname: location.pathname\n  });\n};\nvar query = \"2307766577\";\n","/** @jsx jsx */\nimport { Badge, jsx } from 'theme-ui'\nimport { Fragment } from 'react'\nimport { Link } from 'gatsby'\n\ntype TagsProps = {\n  tags: TagType[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  return (\n    <Fragment>\n      {tags &&\n        tags.map(\n          (tag, i) =>\n            tag && (\n              <Fragment key={tag.slug}>\n                {!!i && ` `}\n                <Link sx={t => ({ ...t.styles?.a })} to={`/tags/${tag.slug}`}>\n                  <Badge\n                    sx={{\n                      px: 3,\n                      py: 1,\n                      mr: 2,\n                      fontSize: 2,\n                      backgroundColor: 'secondary',\n                      letterSpacing: `0.003em`,\n                      borderRadius: `8px`,\n                    }}\n                  >\n                    {tag.name}\n                  </Badge>\n                </Link>\n              </Fragment>\n            ),\n        )}\n    </Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport { Divider, jsx } from 'theme-ui'\nimport React from 'react'\n\ntype CollapsibleProps = {\n  summary: string\n  children: React.ReactNode\n}\n\nexport const Collapsible = ({ summary, children }: CollapsibleProps) => (\n  <details\n    sx={{\n      px: [2, 4],\n    }}\n  >\n    <summary\n      sx={{\n        color: 'secondary',\n        fontWeight: `medium`,\n        fontSize: ['13px', '14px'],\n        cursor: `pointer`,\n        '>:firstOfType': {\n          display: `inline`,\n        },\n      }}\n    >\n      {summary}\n    </summary>\n    <Divider />\n    {children}\n    <Divider />\n  </details>\n)\n\nconst MdxShortCodes = {\n  Collapsible,\n}\n\nexport default MdxShortCodes\n","type PostFooterProps = {\n  post: PostType\n}\n\nconst PostFooter = ({ post }: PostFooterProps) => null\n\nexport default PostFooter\n","import react, { useEffect } from 'react'\n\nconst useScroll = () => {\n  const [scroll, setScroll] = react.useState({\n    x: 0,\n    y: 0,\n  })\n\n  const onScroll = () => {\n    setScroll({ y: window.scrollY, x: window.scrollX })\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll)\n    return () => window.removeEventListener('scroll', onScroll)\n  }, [])\n\n  return scroll\n}\n\nexport default useScroll\n","/** @jsx jsx */\nimport React, { Fragment } from 'react'\nimport { Divider, jsx } from 'theme-ui'\nimport { Link } from 'gatsby'\nimport useScroll from 'hooks/use-scroll'\n\ntype PostTocProps = {\n  items: ItemType[]\n  articleOffset: number\n}\n\nconst offsetTopFixed = 100\n\nconst PostToc = ({ items, articleOffset }: PostTocProps) => {\n  const { y } = useScroll()\n\n  return (\n    <div\n      sx={{\n        ...(y < articleOffset - offsetTopFixed\n          ? {\n              position: 'absolute',\n              top: articleOffset,\n            }\n          : {\n              position: 'fixed',\n              top: `${offsetTopFixed}px`,\n            }),\n        left: '85%',\n        '@media (max-width: 1410px)': {\n          display: 'None',\n        },\n      }}\n    >\n      <Divider sx={{ mh: 0 }} />\n      <nav\n        sx={{\n          color: `secondary`,\n        }}\n      >\n        {items.map((item: ItemType) => {\n          return <TreeComponent item={item} key={item.url} />\n        })}\n      </nav>\n      <Divider sx={{ mh: 0 }} />\n    </div>\n  )\n}\n\nexport default PostToc\n\ntype TreeComponentProps = {\n  item: ItemType\n  depth?: number\n}\nconst TreeComponent = ({ item, depth = 0 }: TreeComponentProps) => (\n  <Fragment>\n    <Link\n      to={`${item.url}`}\n      title={item.title}\n      sx={t => ({\n        ...t.styles?.a,\n        fontSize: ['12px'],\n        color: `secondary`,\n        ':hover': { color: `heading` },\n      })}\n    >\n      <div sx={{ marginLeft: depth * 3 }}> {item.title} </div>\n    </Link>\n    {item.items &&\n      item.items.map((child: ItemType) => {\n        return <TreeComponent item={child} depth={depth + 1} key={child.url} />\n      })}\n  </Fragment>\n)\n","import React from 'react'\nimport useSiteMetadata from 'hooks/use-site-metadata'\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n}\n\nexport const SEO: React.FC<React.PropsWithChildren<SEOProps>> = ({ title, pathname, children }) => {\n  const { title: defaultTitle, siteUrl } = useSiteMetadata()\n\n  const seo = {\n    title: title || defaultTitle,\n    url: `${siteUrl}${pathname || ``}`,\n  }\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <link\n        id=\"favicon-icon\"\n        rel=\"icon\"\n        href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>👤</text></svg>\"\n      />\n      {children}\n    </>\n  )\n}\n","import { useEffect, useRef, useState } from 'react'\n\nconst useOffsetTop = <T extends HTMLElement = HTMLDivElement>() => {\n  const ref = useRef<T>(null)\n\n  const [offsetTop, setOffsetTop] = useState<number>(0)\n\n  const getPosition = () => {\n    const y = ref.current?.offsetTop\n    if (y) setOffsetTop(y)\n  }\n\n  useEffect(() => {\n    getPosition()\n  }, [])\n\n  return { ref, offsetTop }\n}\n\nexport default useOffsetTop\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","a","div","code","pre","ol","li","strong","blockquote","em","h3","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","MDXLayout","wrapper","PostTemplate","map","v","_ref","mdx","data","children","_useOffsetTop","useOffsetTop","ref","offsetTop","jsx","Layout","tableOfContents","items","PostToc","articleOffset","Heading","as","variant","title","description","sx","color","my","fontSize","tags","mt","ItemTags","date","timeToRead","Math","ceil","Divider","MDXProvider","MdxShortCodes","PostFooter","post","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref2","location","SEO","pathname","Fragment","tag","i","key","slug","Link","t","styles","_t$styles","to","Badge","px","py","mr","backgroundColor","letterSpacing","borderRadius","name","Collapsible","summary","fontWeight","cursor","display","react","useState","x","y","scroll","setScroll","onScroll","window","scrollY","scrollX","useEffect","addEventListener","removeEventListener","useScroll","top","offsetTopFixed","left","mh","item","TreeComponent","url","depth","marginLeft","child","useSiteMetadata","defaultTitle","seo","siteUrl","content","rel","useRef","setOffsetTop","current","_ref$current"],"sourceRoot":""}