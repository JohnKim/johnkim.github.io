{"version":3,"file":"component---src-templates-blog-template-tsx-27ba2bdf3c85a5146bae.js","mappings":"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","sources":["webpack://blog/./src/components/blog/blog-list-item.tsx","webpack://blog/./src/components/blog/blog-list.tsx","webpack://blog/./src/components/blog/item-tags.tsx","webpack://blog/./src/components/common/seo.tsx","webpack://blog/./src/templates/blog_template.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { Fragment } from 'react'\nimport { jsx, Box, useColorMode, get } from 'theme-ui'\nimport { Link } from 'gatsby'\nimport ItemTags from 'components/blog/item-tags'\nimport { hoverUnderlineAnimation } from 'utils/styles/styles'\n\ntype BlogListItemProps = {\n  post: PostType\n}\n\nconst BlogListItem = ({ post }: BlogListItemProps) => {\n  const [colorMode] = useColorMode()\n  const hoverColor = colorMode === `dark` ? 'colors.secondary' : 'colors.primary'\n\n  return (\n    <Box mb={4}>\n      <Link\n        to={`${post.slug}`}\n        sx={t => ({\n          textDecoration: 'none',\n          fontSize: [2, 3, 4],\n          color: `text`,\n          //verticalAlign: `top`,\n\n          backgroundImage: `linear-gradient(transparent 40%, ${get(t, hoverColor)} 40%)`,\n          backgroundSize: `auto 180%`,\n          transition: `background 0.1s ease-in-out`,\n\n          '&:hover': {\n            backgroundPositionY: `100%`,\n            color: `heading`,\n          },\n        })}\n      >\n        {post.title}\n        {post.description && <p sx={{ my: 2, fontSize: [1, 1, 2] }}>{post.description}</p>}\n      </Link>\n\n      <p sx={{ color: `onSurface`, mt: 1, fontSize: [1, 1, 2] }}>\n        <time>{post.date}</time>\n      </p>\n      {post.tags && (\n        <Fragment>\n          <ItemTags tags={post.tags} />\n        </Fragment>\n      )}\n    </Box>\n  )\n}\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from 'theme-ui'\nimport BlogListItem from './blog-list-item'\n\ntype BlogListProps = {\n  posts: PostType[]\n  className?: string\n}\n\nconst BlogList = ({ posts, className = `` }: BlogListProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map(post => (\n      <BlogListItem key={post.slug} post={post} />\n    ))}\n  </section>\n)\n\nexport default BlogList\n","/** @jsx jsx */\nimport { Badge, jsx } from 'theme-ui'\nimport { Fragment } from 'react'\nimport { Link } from 'gatsby'\n\ntype TagsProps = {\n  tags: TagType[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  return (\n    <Fragment>\n      {tags &&\n        tags.map(\n          (tag, i) =>\n            tag && (\n              <Fragment key={tag.slug}>\n                {!!i && ` `}\n                <Link sx={t => ({ ...t.styles?.a })} to={`/tags/${tag.slug}`}>\n                  <Badge\n                    sx={{\n                      px: 3,\n                      py: 1,\n                      mr: 2,\n                      fontSize: 2,\n                      backgroundColor: 'secondary',\n                      letterSpacing: `0.003em`,\n                      borderRadius: `8px`,\n                    }}\n                  >\n                    {tag.name}\n                  </Badge>\n                </Link>\n              </Fragment>\n            ),\n        )}\n    </Fragment>\n  )\n}\n\nexport default ItemTags\n","import React from 'react'\nimport useSiteMetadata from 'hooks/use-site-metadata'\nimport { withPrefix } from 'gatsby'\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  canonicalUrl?: string\n}\n\nexport const SEO: React.FC<React.PropsWithChildren<SEOProps>> = ({\n  title,\n  pathname,\n  description,\n  canonicalUrl,\n  children,\n}) => {\n  const { title: defaultTitle, siteUrl, description: defaultDescription } = useSiteMetadata()\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n  }\n\n  return (\n    <>\n      <title title={seo.title} />\n      <meta name=\"description\" content={seo.description} />\n      {/* OG Tags */}\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      {/* Twitter Tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content=\"@johnkim0331\" />{' '}\n      {/* TODO 나중에 site meta 로 빼서 저장해야 할까 싶다.  */}\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      <title>{seo.title}</title>\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n","/** @jsx jsx */\nimport React from 'react'\nimport { graphql, HeadFC, Link, PageProps } from 'gatsby'\nimport { jsx, Flex, Heading } from 'theme-ui'\nimport { SEO } from 'components/common/seo'\nimport Layout from 'components/common/layout'\nimport BlogList from 'components/blog/blog-list'\n\ntype BlogTemplateProps = {\n  allMdx: { nodes: PostType[] }\n}\n\nconst BlogTemplate = ({\n  data: {\n    allMdx: { nodes },\n  },\n}: PageProps<BlogTemplateProps>) => {\n  return (\n    <Layout>\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between`, flexFlow: `wrap` }}>\n        <Heading as=\"h1\" variant=\"styles.h1\" sx={{ marginY: 4 }}>\n          Blog\n        </Heading>\n        <Link sx={t => ({ ...t.styles?.a, color: `onSurface`, marginY: 2 })} to={`/tags`}>\n          테그 목록 보기\n        </Link>\n      </Flex>\n      <BlogList posts={nodes} sx={{ mt: [2, 3] }} />\n    </Layout>\n  )\n}\n\nexport default BlogTemplate\n\nexport const Head: HeadFC<BlogTemplateProps> = ({ location }) => {\n  return <SEO title={'Blog'} pathname={location.pathname} />\n}\n\nexport const query = graphql`\n  query {\n    allMdx(sort: { fields: date, order: DESC }, filter: { source: { eq: \"blog-posts\" } }) {\n      nodes {\n        slug\n        title\n        date(formatString: \"YYYY-MM-DD\")\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n"],"names":["post","hoverColor","useColorMode","jsx","Box","mb","Link","to","slug","sx","t","textDecoration","fontSize","color","backgroundImage","get","backgroundSize","transition","backgroundPositionY","title","description","my","mt","date","tags","Fragment","ItemTags","posts","className","map","BlogListItem","key","tag","i","styles","_t$styles","a","Badge","px","py","mr","backgroundColor","letterSpacing","borderRadius","name","SEO","pathname","canonicalUrl","children","useSiteMetadata","defaultTitle","siteUrl","defaultDescription","seo","url","React","content","property","rel","type","sizes","href","withPrefix","nodes","data","allMdx","Layout","Flex","alignItems","justifyContent","flexFlow","Heading","as","variant","marginY","BlogList","Head","location"],"sourceRoot":""}